// ------------------------------------------------------------------------------
//  <auto-generated>
//      Этот код был создан построителем кодированных тестов ИП.
//      Версия: 16.0.0.0
//
//      Изменения, внесенные в этот файл, могут привести к неправильной работе кода и будут
//      утрачены при повторном формировании кода.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace CodedUITestProject1
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Построитель кодированных тестов ИП", "16.0.29514.35")]
    public partial class UIMap
    {
        
        /// <summary>
        /// OpenApplication
        /// </summary>
        public void OpenApplication()
        {
            #region Variable Declarations
            WinEdit uIИмяEdit = this.UIDebugWindow.UIItemWindow.UITpo_labListItem.UIИмяEdit;
            #endregion

            // Двойной щелчок "Имя" надпись
            Mouse.DoubleClick(uIИмяEdit, new Point(4, 8));
        }
        
        /// <summary>
        /// input_s - Используйте "input_sParams" для передачи параметров в этот метод.
        /// </summary>
        public void input_s()
        {
            #region Variable Declarations
            WinEdit uITextBox1Edit = this.UIТПОПрактическоезаданWindow.UITextBox1Window.UITextBox1Edit;
            #endregion

            // Тип "12&**&&**23e" в "textBox1" надпись
            uITextBox1Edit.Text = this.input_sParams.UITextBox1EditText;
        }
        
        /// <summary>
        /// input_t - Используйте "input_tParams" для передачи параметров в этот метод.
        /// </summary>
        public void input_t()
        {
            #region Variable Declarations
            WinEdit uITextBox2Edit = this.UIТПОПрактическоезаданWindow.UITextBox2Window.UITextBox2Edit;
            #endregion

            // Тип "aabbcc22" в "textBox2" надпись
            uITextBox2Edit.Text = this.input_tParams.UITextBox2EditText;
        }
        
        /// <summary>
        /// ChooseSharp
        /// </summary>
        public void ChooseSharp()
        {
            #region Variable Declarations
            WinRadioButton uIПосчитатьколичествоRadioButton = this.UIТПОПрактическоезаданWindow.UIПосчитатьколичествоWindow.UIПосчитатьколичествоRadioButton;
            #endregion

            // Щелкните "Посчитать количество *" переключатель
            Mouse.Click(uIПосчитатьколичествоRadioButton, new Point(5, 19));
        }
        
        /// <summary>
        /// Compute
        /// </summary>
        public void Compute()
        {
            #region Variable Declarations
            WinButton uIВычислитьButton = this.UIТПОПрактическоезаданWindow.UIВычислитьWindow.UIВычислитьButton;
            #endregion

            // Щелкните "Вычислить" кнопка
            Mouse.Click(uIВычислитьButton, new Point(54, 13));
        }
        
        /// <summary>
        /// AssertMethod1 - Используйте "AssertMethod1ExpectedValues" для передачи параметров в этот метод.
        /// </summary>
        public void AssertMethod1()
        {
            #region Variable Declarations
            WinText uIЗначениеK2Text = this.UIТПОПрактическоезаданWindow.UIЗначениеK2Window.UIЗначениеK2Text;
            #endregion

            // Убедитесь, что свойство DisplayText "Значение K: 2" надпись равняется "Значение K: 2"
            Assert.AreEqual(this.AssertMethod1ExpectedValues.UIЗначениеK2TextDisplayText, uIЗначениеK2Text.DisplayText);
        }
        
        /// <summary>
        /// CloseApp
        /// </summary>
        public void CloseApp()
        {
            #region Variable Declarations
            WinButton uIЗакрытьButton = this.UIТПОПрактическоезаданWindow.UIТПОПрактическоезаданTitleBar.UIЗакрытьButton;
            #endregion

            // Щелкните "Закрыть" кнопка
            Mouse.Click(uIЗакрытьButton, new Point(11, 23));
        }
        
        /// <summary>
        /// ChooseAmpersant - Используйте "ChooseAmpersantParams" для передачи параметров в этот метод.
        /// </summary>
        public void ChooseAmpersant()
        {
            #region Variable Declarations
            WinRadioButton uIПосчитатьколичествоRadioButton = this.UIТПОПрактическоезаданWindow.UIПосчитатьколичествоWindow1.UIПосчитатьколичествоRadioButton;
            #endregion

            // Выбор "Посчитать количество &&" переключатель
            uIПосчитатьколичествоRadioButton.Selected = this.ChooseAmpersantParams.UIПосчитатьколичествоRadioButtonSelected;
        }
        
        /// <summary>
        /// input_s2 - Используйте "input_s2Params" для передачи параметров в этот метод.
        /// </summary>
        public void input_s2()
        {
            #region Variable Declarations
            WinEdit uITextBox1Edit = this.UIТПОПрактическоезаданWindow.UITextBox1Window.UITextBox1Edit;
            #endregion

            // Тип "abvdc" в "textBox1" надпись
            uITextBox1Edit.Text = this.input_s2Params.UITextBox1EditText;
        }
        
        /// <summary>
        /// input_t2 - Используйте "input_t2Params" для передачи параметров в этот метод.
        /// </summary>
        public void input_t2()
        {
            #region Variable Declarations
            WinEdit uITextBox2Edit = this.UIТПОПрактическоезаданWindow.UITextBox2Window.UITextBox2Edit;
            #endregion

            // Тип "asd" в "textBox2" надпись
            uITextBox2Edit.Text = this.input_t2Params.UITextBox2EditText;
        }
        
        /// <summary>
        /// AssertMethod2 - Используйте "AssertMethod2ExpectedValues" для передачи параметров в этот метод.
        /// </summary>
        public void AssertMethod2()
        {
            #region Variable Declarations
            WinControl uIСообщениеDialog = this.UIСообщениеWindow.UIСообщениеDialog;
            #endregion

            // Убедитесь, что свойство Name "Сообщение" Dialog равняется "Сообщение"
            Assert.AreEqual(this.AssertMethod2ExpectedValues.UIСообщениеDialogName, uIСообщениеDialog.Name);
        }
        
        /// <summary>
        /// PressOk
        /// </summary>
        public void PressOk()
        {
            #region Variable Declarations
            WinButton uIОКButton = this.UIСообщениеWindow.UIОКWindow.UIОКButton;
            #endregion

            // Щелкните "ОК" кнопка
            Mouse.Click(uIОКButton, new Point(36, 13));
        }
        
        #region Properties
        public virtual input_sParams input_sParams
        {
            get
            {
                if ((this.minput_sParams == null))
                {
                    this.minput_sParams = new input_sParams();
                }
                return this.minput_sParams;
            }
        }
        
        public virtual input_tParams input_tParams
        {
            get
            {
                if ((this.minput_tParams == null))
                {
                    this.minput_tParams = new input_tParams();
                }
                return this.minput_tParams;
            }
        }
        
        public virtual AssertMethod1ExpectedValues AssertMethod1ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod1ExpectedValues == null))
                {
                    this.mAssertMethod1ExpectedValues = new AssertMethod1ExpectedValues();
                }
                return this.mAssertMethod1ExpectedValues;
            }
        }
        
        public virtual ChooseAmpersantParams ChooseAmpersantParams
        {
            get
            {
                if ((this.mChooseAmpersantParams == null))
                {
                    this.mChooseAmpersantParams = new ChooseAmpersantParams();
                }
                return this.mChooseAmpersantParams;
            }
        }
        
        public virtual input_s2Params input_s2Params
        {
            get
            {
                if ((this.minput_s2Params == null))
                {
                    this.minput_s2Params = new input_s2Params();
                }
                return this.minput_s2Params;
            }
        }
        
        public virtual input_t2Params input_t2Params
        {
            get
            {
                if ((this.minput_t2Params == null))
                {
                    this.minput_t2Params = new input_t2Params();
                }
                return this.minput_t2Params;
            }
        }
        
        public virtual AssertMethod2ExpectedValues AssertMethod2ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod2ExpectedValues == null))
                {
                    this.mAssertMethod2ExpectedValues = new AssertMethod2ExpectedValues();
                }
                return this.mAssertMethod2ExpectedValues;
            }
        }
        
        public UIDebugWindow UIDebugWindow
        {
            get
            {
                if ((this.mUIDebugWindow == null))
                {
                    this.mUIDebugWindow = new UIDebugWindow();
                }
                return this.mUIDebugWindow;
            }
        }
        
        public UIТПОПрактическоезаданWindow UIТПОПрактическоезаданWindow
        {
            get
            {
                if ((this.mUIТПОПрактическоезаданWindow == null))
                {
                    this.mUIТПОПрактическоезаданWindow = new UIТПОПрактическоезаданWindow();
                }
                return this.mUIТПОПрактическоезаданWindow;
            }
        }
        
        public UIСообщениеWindow UIСообщениеWindow
        {
            get
            {
                if ((this.mUIСообщениеWindow == null))
                {
                    this.mUIСообщениеWindow = new UIСообщениеWindow();
                }
                return this.mUIСообщениеWindow;
            }
        }
        #endregion
        
        #region Fields
        private input_sParams minput_sParams;
        
        private input_tParams minput_tParams;
        
        private AssertMethod1ExpectedValues mAssertMethod1ExpectedValues;
        
        private ChooseAmpersantParams mChooseAmpersantParams;
        
        private input_s2Params minput_s2Params;
        
        private input_t2Params minput_t2Params;
        
        private AssertMethod2ExpectedValues mAssertMethod2ExpectedValues;
        
        private UIDebugWindow mUIDebugWindow;
        
        private UIТПОПрактическоезаданWindow mUIТПОПрактическоезаданWindow;
        
        private UIСообщениеWindow mUIСообщениеWindow;
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "input_s"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "16.0.29514.35")]
    public class input_sParams
    {
        
        #region Fields
        /// <summary>
        /// Тип "12&**&&**23e" в "textBox1" надпись
        /// </summary>
        public string UITextBox1EditText = "12&**&&**23e";
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "input_t"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "16.0.29514.35")]
    public class input_tParams
    {
        
        #region Fields
        /// <summary>
        /// Тип "aabbcc22" в "textBox2" надпись
        /// </summary>
        public string UITextBox2EditText = "aabbcc22";
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "AssertMethod1"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "16.0.29514.35")]
    public class AssertMethod1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Убедитесь, что свойство DisplayText "Значение K: 2" надпись равняется "Значение K: 2"
        /// </summary>
        public string UIЗначениеK2TextDisplayText = "Значение K: 2";
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "ChooseAmpersant"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "16.0.29514.35")]
    public class ChooseAmpersantParams
    {
        
        #region Fields
        /// <summary>
        /// Выбор "Посчитать количество &&" переключатель
        /// </summary>
        public bool UIПосчитатьколичествоRadioButtonSelected = true;
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "input_s2"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "16.0.29514.35")]
    public class input_s2Params
    {
        
        #region Fields
        /// <summary>
        /// Тип "abvdc" в "textBox1" надпись
        /// </summary>
        public string UITextBox1EditText = "abvdc";
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "input_t2"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "16.0.29514.35")]
    public class input_t2Params
    {
        
        #region Fields
        /// <summary>
        /// Тип "asd" в "textBox2" надпись
        /// </summary>
        public string UITextBox2EditText = "asd";
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "AssertMethod2"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "16.0.29514.35")]
    public class AssertMethod2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Убедитесь, что свойство Name "Сообщение" Dialog равняется "Сообщение"
        /// </summary>
        public string UIСообщениеDialogName = "Сообщение";
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "16.0.29514.35")]
    public class UIDebugWindow : WinWindow
    {
        
        public UIDebugWindow()
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Debug";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "CabinetWClass";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "16.0.29514.35")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Просмотр элементов";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public UITpo_labListItem UITpo_labListItem
        {
            get
            {
                if ((this.mUITpo_labListItem == null))
                {
                    this.mUITpo_labListItem = new UITpo_labListItem(this);
                }
                return this.mUITpo_labListItem;
            }
        }
        #endregion
        
        #region Fields
        private UITpo_labListItem mUITpo_labListItem;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "16.0.29514.35")]
    public class UITpo_labListItem : WinListItem
    {
        
        public UITpo_labListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinListItem.PropertyNames.Name] = "tpo_lab";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public WinEdit UIИмяEdit
        {
            get
            {
                if ((this.mUIИмяEdit == null))
                {
                    this.mUIИмяEdit = new WinEdit(this);
                    #region Условия поиска
                    this.mUIИмяEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Имя";
                    this.mUIИмяEdit.WindowTitles.Add("Debug");
                    #endregion
                }
                return this.mUIИмяEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIИмяEdit;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "16.0.29514.35")]
    public class UIТПОПрактическоезаданWindow : WinWindow
    {
        
        public UIТПОПрактическоезаданWindow()
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.Name] = "ТПО Практическое задание Хритова Д.А,";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("ТПО Практическое задание Хритова Д.А,");
            #endregion
        }
        
        #region Properties
        public UITextBox1Window UITextBox1Window
        {
            get
            {
                if ((this.mUITextBox1Window == null))
                {
                    this.mUITextBox1Window = new UITextBox1Window(this);
                }
                return this.mUITextBox1Window;
            }
        }
        
        public UITextBox2Window UITextBox2Window
        {
            get
            {
                if ((this.mUITextBox2Window == null))
                {
                    this.mUITextBox2Window = new UITextBox2Window(this);
                }
                return this.mUITextBox2Window;
            }
        }
        
        public UIПосчитатьколичествоWindow UIПосчитатьколичествоWindow
        {
            get
            {
                if ((this.mUIПосчитатьколичествоWindow == null))
                {
                    this.mUIПосчитатьколичествоWindow = new UIПосчитатьколичествоWindow(this);
                }
                return this.mUIПосчитатьколичествоWindow;
            }
        }
        
        public UIВычислитьWindow UIВычислитьWindow
        {
            get
            {
                if ((this.mUIВычислитьWindow == null))
                {
                    this.mUIВычислитьWindow = new UIВычислитьWindow(this);
                }
                return this.mUIВычислитьWindow;
            }
        }
        
        public UIЗначениеK2Window UIЗначениеK2Window
        {
            get
            {
                if ((this.mUIЗначениеK2Window == null))
                {
                    this.mUIЗначениеK2Window = new UIЗначениеK2Window(this);
                }
                return this.mUIЗначениеK2Window;
            }
        }
        
        public UIТПОПрактическоезаданTitleBar UIТПОПрактическоезаданTitleBar
        {
            get
            {
                if ((this.mUIТПОПрактическоезаданTitleBar == null))
                {
                    this.mUIТПОПрактическоезаданTitleBar = new UIТПОПрактическоезаданTitleBar(this);
                }
                return this.mUIТПОПрактическоезаданTitleBar;
            }
        }
        
        public UIПосчитатьколичествоWindow1 UIПосчитатьколичествоWindow1
        {
            get
            {
                if ((this.mUIПосчитатьколичествоWindow1 == null))
                {
                    this.mUIПосчитатьколичествоWindow1 = new UIПосчитатьколичествоWindow1(this);
                }
                return this.mUIПосчитатьколичествоWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UITextBox1Window mUITextBox1Window;
        
        private UITextBox2Window mUITextBox2Window;
        
        private UIПосчитатьколичествоWindow mUIПосчитатьколичествоWindow;
        
        private UIВычислитьWindow mUIВычислитьWindow;
        
        private UIЗначениеK2Window mUIЗначениеK2Window;
        
        private UIТПОПрактическоезаданTitleBar mUIТПОПрактическоезаданTitleBar;
        
        private UIПосчитатьколичествоWindow1 mUIПосчитатьколичествоWindow1;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "16.0.29514.35")]
    public class UITextBox1Window : WinWindow
    {
        
        public UITextBox1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBox1";
            this.WindowTitles.Add("ТПО Практическое задание Хритова Д.А,");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBox1Edit
        {
            get
            {
                if ((this.mUITextBox1Edit == null))
                {
                    this.mUITextBox1Edit = new WinEdit(this);
                    #region Условия поиска
                    this.mUITextBox1Edit.SearchProperties[WinEdit.PropertyNames.Name] = "Введите строку T:";
                    this.mUITextBox1Edit.WindowTitles.Add("ТПО Практическое задание Хритова Д.А,");
                    #endregion
                }
                return this.mUITextBox1Edit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBox1Edit;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "16.0.29514.35")]
    public class UITextBox2Window : WinWindow
    {
        
        public UITextBox2Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBox2";
            this.WindowTitles.Add("ТПО Практическое задание Хритова Д.А,");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBox2Edit
        {
            get
            {
                if ((this.mUITextBox2Edit == null))
                {
                    this.mUITextBox2Edit = new WinEdit(this);
                    #region Условия поиска
                    this.mUITextBox2Edit.WindowTitles.Add("ТПО Практическое задание Хритова Д.А,");
                    #endregion
                }
                return this.mUITextBox2Edit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBox2Edit;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "16.0.29514.35")]
    public class UIПосчитатьколичествоWindow : WinWindow
    {
        
        public UIПосчитатьколичествоWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "radioButton1";
            this.WindowTitles.Add("ТПО Практическое задание Хритова Д.А,");
            #endregion
        }
        
        #region Properties
        public WinRadioButton UIПосчитатьколичествоRadioButton
        {
            get
            {
                if ((this.mUIПосчитатьколичествоRadioButton == null))
                {
                    this.mUIПосчитатьколичествоRadioButton = new WinRadioButton(this);
                    #region Условия поиска
                    this.mUIПосчитатьколичествоRadioButton.SearchProperties[WinRadioButton.PropertyNames.Name] = "Посчитать количество *";
                    this.mUIПосчитатьколичествоRadioButton.WindowTitles.Add("ТПО Практическое задание Хритова Д.А,");
                    #endregion
                }
                return this.mUIПосчитатьколичествоRadioButton;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mUIПосчитатьколичествоRadioButton;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "16.0.29514.35")]
    public class UIВычислитьWindow : WinWindow
    {
        
        public UIВычислитьWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button1";
            this.WindowTitles.Add("ТПО Практическое задание Хритова Д.А,");
            #endregion
        }
        
        #region Properties
        public WinButton UIВычислитьButton
        {
            get
            {
                if ((this.mUIВычислитьButton == null))
                {
                    this.mUIВычислитьButton = new WinButton(this);
                    #region Условия поиска
                    this.mUIВычислитьButton.SearchProperties[WinButton.PropertyNames.Name] = "Вычислить";
                    this.mUIВычислитьButton.WindowTitles.Add("ТПО Практическое задание Хритова Д.А,");
                    #endregion
                }
                return this.mUIВычислитьButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIВычислитьButton;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "16.0.29514.35")]
    public class UIЗначениеK2Window : WinWindow
    {
        
        public UIЗначениеK2Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "label3";
            this.WindowTitles.Add("ТПО Практическое задание Хритова Д.А,");
            #endregion
        }
        
        #region Properties
        public WinText UIЗначениеK2Text
        {
            get
            {
                if ((this.mUIЗначениеK2Text == null))
                {
                    this.mUIЗначениеK2Text = new WinText(this);
                    #region Условия поиска
                    this.mUIЗначениеK2Text.SearchProperties[WinText.PropertyNames.Name] = "Значение K: 2";
                    this.mUIЗначениеK2Text.WindowTitles.Add("ТПО Практическое задание Хритова Д.А,");
                    #endregion
                }
                return this.mUIЗначениеK2Text;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIЗначениеK2Text;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "16.0.29514.35")]
    public class UIТПОПрактическоезаданTitleBar : WinTitleBar
    {
        
        public UIТПОПрактическоезаданTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.WindowTitles.Add("ТПО Практическое задание Хритова Д.А,");
            #endregion
        }
        
        #region Properties
        public WinButton UIЗакрытьButton
        {
            get
            {
                if ((this.mUIЗакрытьButton == null))
                {
                    this.mUIЗакрытьButton = new WinButton(this);
                    #region Условия поиска
                    this.mUIЗакрытьButton.SearchProperties[WinButton.PropertyNames.Name] = "Закрыть";
                    this.mUIЗакрытьButton.WindowTitles.Add("ТПО Практическое задание Хритова Д.А,");
                    #endregion
                }
                return this.mUIЗакрытьButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIЗакрытьButton;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "16.0.29514.35")]
    public class UIПосчитатьколичествоWindow1 : WinWindow
    {
        
        public UIПосчитатьколичествоWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "radioButton2";
            this.WindowTitles.Add("ТПО Практическое задание Хритова Д.А,");
            #endregion
        }
        
        #region Properties
        public WinRadioButton UIПосчитатьколичествоRadioButton
        {
            get
            {
                if ((this.mUIПосчитатьколичествоRadioButton == null))
                {
                    this.mUIПосчитатьколичествоRadioButton = new WinRadioButton(this);
                    #region Условия поиска
                    this.mUIПосчитатьколичествоRadioButton.SearchProperties[WinRadioButton.PropertyNames.Name] = "Посчитать количество &";
                    this.mUIПосчитатьколичествоRadioButton.WindowTitles.Add("ТПО Практическое задание Хритова Д.А,");
                    #endregion
                }
                return this.mUIПосчитатьколичествоRadioButton;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mUIПосчитатьколичествоRadioButton;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "16.0.29514.35")]
    public class UIСообщениеWindow : WinWindow
    {
        
        public UIСообщениеWindow()
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Сообщение";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Сообщение");
            #endregion
        }
        
        #region Properties
        public WinControl UIСообщениеDialog
        {
            get
            {
                if ((this.mUIСообщениеDialog == null))
                {
                    this.mUIСообщениеDialog = new WinControl(this);
                    #region Условия поиска
                    this.mUIСообщениеDialog.SearchProperties[UITestControl.PropertyNames.Name] = "Сообщение";
                    this.mUIСообщениеDialog.SearchProperties[UITestControl.PropertyNames.ControlType] = "Dialog";
                    this.mUIСообщениеDialog.WindowTitles.Add("Сообщение");
                    #endregion
                }
                return this.mUIСообщениеDialog;
            }
        }
        
        public UIОКWindow UIОКWindow
        {
            get
            {
                if ((this.mUIОКWindow == null))
                {
                    this.mUIОКWindow = new UIОКWindow(this);
                }
                return this.mUIОКWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinControl mUIСообщениеDialog;
        
        private UIОКWindow mUIОКWindow;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "16.0.29514.35")]
    public class UIОКWindow : WinWindow
    {
        
        public UIОКWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Сообщение");
            #endregion
        }
        
        #region Properties
        public WinButton UIОКButton
        {
            get
            {
                if ((this.mUIОКButton == null))
                {
                    this.mUIОКButton = new WinButton(this);
                    #region Условия поиска
                    this.mUIОКButton.SearchProperties[WinButton.PropertyNames.Name] = "ОК";
                    this.mUIОКButton.WindowTitles.Add("Сообщение");
                    #endregion
                }
                return this.mUIОКButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIОКButton;
        #endregion
    }
}
